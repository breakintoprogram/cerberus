;
; Title:	BBC Basic for Cerberus 2080
; Author:	Dean Belfield
; Created:	31/07/2021
; Last Updated:	13/08/2021
;
; Modinfo:
; 12/08/2021:	Added POINT, GCOL, LOAD and SAVE and STAR commands BYE, MEMDUMP, FX, ERASE, DELETE
; 13/08/2021:	Added STAR commands LOAD and SAVE
			
			MODULE PATCH

@OSWRCH:		EQU	CERBERUS_IO.Print_Char		; Write a character out
@OSLINE			EQU 	EDITOR.Edit_Line		; Line editor

; CLRSCN: clears the screen.
;
@CLRSCN:		LD	A, 0x0C
			JP	OSWRCH

; PUTIME: set current time to DE:HL, in centiseconds.
;
@PUTIME:		LD	(TIME + 2), DE
			LD	(TIME + 0), HL
			RET

; GETIME: return current time in DE:HL, in centiseconds.
;
@GETIME:		LD	DE, (TIME + 2)
 	  		LD	HL, (TIME + 0)
			RET

; PUTCSR: move to cursor to x=DE, y=HL
;
@PUTCSR:		LD	D, L			; E: X, D: Y
			LD	(CHARPOS_X), DE
			RET

; GETCSR: return cursor position in x=DE, y=HL
;
@GETCSR:		LD	DE, (CHARPOS_X)		; E: X, D: Y
			LD	L, D 					
			LD	H, 0			; HL: Y
			LD	D, H 			; DE: X
			RET

; Read character from keyboard (blocking)
;
@OSRDCH:		LD	A, (KEY_CODE)
			OR	A
			JR	Z, OSRDCH
			PUSH	AF
1:			LD	A, (KEY_CODE)
			OR	A
			JR	NZ, 1B
			POP	AF
			RET	

; PROMPT: output the input prompt
;
@PROMPT: 		LD	A,'>'
			JP	OSWRCH

;OSKEY - Read key with time-limit, test for ESCape.
;Main function is carried out in user patch.
;   Inputs: HL = time limit (centiseconds)
;  Outputs: Carry reset if time-out
;           If carry set A = character
; Destroys: A,H,L,F
;
@OSKEY: 		LD	A, (KEY_CODE)	; Read keyboard
			OR	A		; If we have a character
			JR	NZ, 1F		; Then process it
			LD	A,H		; Check if HL is 0 (this is passed by INKEY() function
			OR	L
			RET	Z 		; If it is then ret
			HALT			; Bit of a bodge so this is timed in ms
			DEC	HL 		; Decrement the counter and 
			JR	@OSKEY 		; loop
1:			CP	0x1B		; If we are not pressing ESC, 
			SCF 			; then flag we've got a character
			RET	NZ		
;
ESCSET: 		PUSH    HL
        		LD      HL,FLAGS
        		BIT     6,(HL)          ; ESC DISABLED?
        		JR      NZ,ESCDIS
        		SET     7,(HL)          ; SET ESCAPE FLAG
ESCDIS: 		POP     HL
        		RET	
;
ESCTEST:		LD	A, (KEY_CODE)
			CP	0x1B		; ESC	
			JR	Z,ESCSET
			RET
;
@TRAP:			CALL	ESCTEST
@LTRAP:			LD	A,(FLAGS)
			OR	A
			RET	P
			LD	HL,FLAGS 
			RES	7,(HL)
			JP	ESCAPE

;OSINIT - Initialise RAM mapping etc.
;If BASIC is entered by BBCBASIC FILENAME then file
;FILENAME.BBC is automatically CHAINed.
;   Outputs: DE = initial value of HIMEM (top of RAM)
;            HL = initial value of PAGE (user program)
;            Z-flag reset indicates AUTO-RUN.
;  Destroys: A,D,E,H,L,F
;
@OSINIT:		LD 	HL, @USER
			LD	DE, @RAM_Top
			XOR	A
			LD	(@FLAGS), A			; Clear flags and set F = Z
         		RET	

;
;OSCLI - Process an "operating system" command
;
@OSCLI: 		CALL    SKIPSP
			CP      CR
			RET     Z
			CP      '|'
			RET     Z
			CP      '.'
			JP      Z,STAR_DOT	; *.
			EX      DE,HL
			LD      HL,COMDS
OSCLI0:			LD      A,(DE)
			CALL    UPPRC
			CP      (HL)
			JR      Z,OSCLI2
			JR      C,HUH
OSCLI1:			BIT     7,(HL)
			INC     HL
			JR      Z,OSCLI1
			INC     HL
			INC     HL
			JR      OSCLI0
;
OSCLI2:			PUSH    DE
OSCLI3:			INC     DE
			INC     HL
			LD      A,(DE)
			CALL    UPPRC
			CP      '.'		; ABBREVIATED?
			JR      Z,OSCLI4
			XOR     (HL)
			JR      Z,OSCLI3
			CP      80H
			JR      Z,OSCLI4
			POP     DE
			JR      OSCLI1
;
OSCLI4:			POP     AF
		        INC     DE
OSCLI5:			BIT     7,(HL)
			INC     HL
			JR      Z,OSCLI5
			LD      A,(HL)
			INC     HL
			LD      H,(HL)
			LD      L,A
			PUSH    HL
			EX      DE,HL
			JP      SKIPSP

HUH:    		LD      A,254
        		CALL    EXTERR
        		DEFM    'Bad command'
        		DEFB    0			

SKIPSP:			LD      A,(HL)
        		CP      ' '
        		RET     NZ
        		INC     HL
        		JR      SKIPSP	

UPPRC:  		AND     7FH
			CP      '`'
			RET     C
			AND     5FH		; CONVERT TO UPPER CASE
			RET					

; Each command has bit 7 of the last character set, and is followed by the address of the handler
;
COMDS:  		DC	'BYE': DEFW STAR_BYE	; Exit to BIOS
			DC	'CAT': DEFW STAR_CAT	; Catalogue SD Card
			DC	'DELETE': DEFW STAR_DELETE
			DC	'ERASE': DEFW STAR_DELETE
			DC	'FX': DEFW STAR_FX	; FX command
			DC	'LOAD': DEFW STAR_LOAD
			DC	'MEMDUMP': DEFW STAR_MEMDUMP
			DC	'SAVE': DEFW STAR_SAVE
			DC	'TEST': DEFW STAR_TEST 
			DEFB	0FFH	

; *BYE
;
STAR_BYE:		LD 	A, 0x7F
			LD	(Outbox_Flag), A 
			LD	L, 0
			JP	EVAL.COUNT0

; *CAT / *.
;
STAR_DOT:
STAR_CAT:		RET 

; *DELETE filename
;
STAR_DELETE:		CALL	SKIPSP
			JP	CERBERUS_DOS.Delete
			
; *MEMDUMP addr count
; 
STAR_MEMDUMP		CALL	ASC_TO_NUMBER	; Get start address
			PUSH	DE 
			CALL	ASC_TO_NUMBER	; Get length in DE
			POP	HL 		; Get start address in HL
			JP	CERBERUS_DEBUG.Memory_Dump

; *LOAD file addr
;
STAR_LOAD:		CALL	SKIPSP		; First parameter is a string
			PUSH	HL		; Stack the string pointer
			CALL	SKIPNOTSP	; Skip to the next parameter
			CALL	ASC_TO_NUMBER	; DE: Address
			POP	HL		; HL: Pointer to Filename
			LD	BC, -1		; Maximum number of bytes
			JP	CERBERUS_DOS.Load 

; *SAVE file addr len
;
STAR_SAVE:		CALL	SKIPSP		; First parameter is a string
			PUSH	HL		; Stack the string pointer
			CALL	SKIPNOTSP	; Skip to the next parameter
			CALL	ASC_TO_NUMBER	; Read address
			PUSH	DE 
			CALL	ASC_TO_NUMBER	; Read length
			EXREG	DE, BC		; BC: Length
			POP	DE 		; DE: Start address
			POP	HL		; HL: Pointer to Filename
			JP	CERBERUS_DOS.Save 
			
; *TEST 
;
STAR_TEST		RET

; *FX
;
STAR_FX:		CALL	ASC_TO_NUMBER	; C: FX #
			LD	C, E
			CALL	ASC_TO_NUMBER	; B: First parameter
			LD	B, E
			CALL	ASC_TO_NUMBER	; E: Second parameter
			LD	L, B 		; L: First parameter
			LD	H, E 		; H: Second parameter
			LD	A, C 		; A: FX #, and fall through to OSBYTE
;
; OSBYTE
;  A: FX #
;  L: First parameter
;  H: Second parameter
;
OSBYTE:			CP	0x13
			JR	Z, OSBYTE_13
			JP 	HUH

; OSBYTE 0x13 (FX 19): Wait 1/50th of a second
;
OSBYTE_13:		HALT	
			LD	L, 0
			JP	EVAL.COUNT0

; GET(port) - Read Z80/Nextreg port
; GET(x, y) - Read character from screen position (x, y)
; Called from GET in eval.z80
;
@GET_PORT:		INC	IY		; Skip '('
			CALL    EXPRI           ; PORT ADDRESS
			EXX
			PUSH	HL 
			CALL	NXT
			CP	","
			JR	NZ, 1F
;
; Get second parameter
;
			CALL	COMMA		
			CALL	EXPRI
			EXX 
			POP	DE 		; DE: X coordinate 
			LD	H, L		; H: Y coordinate
			LD	L, E		; L: X coordinate
			CALL	CERBERUS_GRAPHICS.Get_Char
			LD	L, A		; Character code, or 0xFF if no match
			JR	C, 3F		; We have a character
			CALL	BRAKET		; Check for second bracket
			JP	EVAL.TRUE	; Return -1
;
; Read port
;
1:			POP	BC 		; Port # in BC
			IN	L, (C)		; Read the value
3:			CALL	BRAKET
			JP	EVAL.COUNT0

; GET$(x, y) - Read character from screen position (x, y)
;
@GET_CHAR:		INC	IY
			CALL    EXPRI           ;Get X coordinate
			EXX
			PUSH	HL 		
			CALL	COMMA		
			CALL	EXPRI		;Get Y coordinate
			EXX 
			POP	DE 		;DE: X coordinate 
			LD	H, L		;H: Y coordinate
			LD	L, E		;L: X coordinate
			CALL	CERBERUS_GRAPHICS.Get_Char
			EX	AF, AF
			CALL	BRAKET
			EX	AF, AF
			JP	EVAL.INKEY1 

; GCOL mode,colour
;
@GCOL:			CALL	EXPR_P2		; DE: mode, HL: colour
			LD	A, E 
			LD	(PLOT_MODE), A 
			LD	A, L 
			LD	(PLOT_COLOUR), A 
			JP	XEQ 			

; MOVE x, y
;
@MOVE:			CALL	EXPR_P2		; DE: X, HL: Y
			LD	H, L		; H: Y 
			LD	L, E		; L: X
			CALL	MOVE_1
			JP	XEQ 
;
@MOVE_1:		LD	DE, (PLOTPOS_X)	; Store the previous plot points
			LD 	(PLOTPRE_X), DE 
			LD	(PLOTPOS_X), HL	; And store the latest plot point
			RET
; DRAW x, y
;
@DRAW:			CALL	EXPR_P2		; DE: X, HL: Y
			LD	H, L		; H: Y 
			LD	L, E		; L: X
			CALL	NXT 		; Are there any more paramters?
			CP	","		
			JR	NZ, 1F		; No, so just do 'DRAW x, y'
			CALL	COMMA		; Okay, we're now doing 'DRAW x1,y1,x2,y2
			CALL	MOVE_1		; MOVE x1, y1 (E, L)
			CALL	EXPR_P2		; DE: X2, HL: Y2
			LD	H, L 
			LD	L, E 
1:			PUSH	HL 		; Stack X2
			CALL	CERBERUS_GRAPHICS.Plot_Line 
			JR	PLOT_1	


; PLOT mode,x,y
;
@PLOT:			CALL	EXPRI		; Get the plot type (line, plot, etc)
			EXX
			PUSH	HL	
			CALL	COMMA 
			CALL	EXPR_P2		; DE: X, HL: Y
			POP	BC		; Plot type in C
			LD	A, C 		; Plot type in A
			LD	H, L		; H: Y
			LD	L, E 		; L: X
			PUSH	HL		 
			CALL	CERBERUS_GRAPHICS.Plot
@PLOT_1:		POP	HL	
			CALL	MOVE_1
1:			JP	XEQ

; POINT(x, y)
;
@POINT:			CALL	EXPR_P2		; DE: X, HL: Y
			LD	H, L		; H: Y
			LD	L, E 		; L: X
			CALL	CERBERUS_GRAPHICS.Point
			LD	L, A
1:			CALL	BRAKET
			JP      EVAL.COUNT0

;OSLOAD - Load an area of memory from a file.
;   Inputs: HL addresses filename (CR terminated)
;           DE = address at which to load
;           BC = maximum allowed size (bytes)
;  Outputs: Carry reset indicates no room for file.
; Destroys: A,B,C,D,E,H,L,F
;
@OSLOAD:		JP	CERBERUS_DOS.Load

;OSSAVE - Save an area of memory to a file.
;   Inputs: HL addresses filename (term CR)
;           DE = start address of data to save
;           BC = length of data to save (bytes)
; Destroys: A,B,C,D,E,H,L,F
;
@OSSAVE:		JP	CERBERUS_DOS.Save

; SOUND channel,volume,pitch,duration
; volume: 0 (off) to -15 (full volume)
; pitch: 0 - 255
; duration: -1 to 254 (duration in 20ths of a second, -1 = play forever)
;
@SOUND:			CALL	EXPR_P2		; DE: Channel/Control, HL: Volume - ignored
			CALL	COMMA
			CALL	EXPR_P2		; DE: Pitch, HL: Duration
			LD	B, H
			LD	C, L 
			LD	A, E 
			CALL	CERBERUS_SOUND.Play_Note
			JP	XEQ

; Get two values from EXPR in DE, HL
; IY: Pointer to expression string
; Returns:
; DE: P1
; HL: P2
;
@EXPR_P2:		CALL	EXPRI		; Get first parameter	
			EXX
			PUSH	HL
			CALL	COMMA 
			CALL	EXPRI		; Get second parameter
			EXX
			POP	DE
			RET

; Stuff not implemented yet
;
@OSBPUT:
@OSBGET:
@OSSTAT:
@OSSHUT:
@OSOPEN:
@OSCALL:
@GETPTR:
@PUTPTR:
@GETEXT:
@RESET:
			RET

			ENDMODULE